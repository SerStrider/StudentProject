package com.hcl.springbootjsp.controllers;

import java.util.List;

import javax.persistence.Query;
import javax.persistence.EntityManager;
import javax.persistence.PersistenceContext;
import javax.transaction.Transactional;

import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.ModelAttribute;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.ResponseBody;
import org.springframework.web.servlet.mvc.support.RedirectAttributes;
import org.springframework.web.servlet.view.RedirectView;

import com.hcl.springbootjsp.model.NewUser;
import com.hcl.springbootjsp.model.Student;

@Controller
@RequestMapping("/student")
public class StudentController {
	@PersistenceContext
	private EntityManager entityManager;
	
	public StudentController() {
		
	}
    /////////////////////////////////////////////////////////////////////////////////////////////////////////
    //////////////////////////////////////////// ADD STUDENT ////////////////////////////////////////////////
    /////////////////////////////////////////////////////////////////////////////////////////////////////////
	
	//To render the form for the student
    @GetMapping("/addStudent")
    public String addStudentView(Model model) {
        model.addAttribute("student", new Student());
        return "add-student";
    }

    //This one was called when you POST from a form tag
    @Transactional
    @PostMapping("/addStudent")
    public RedirectView addStudent(@ModelAttribute("student") Student student, RedirectAttributes redirectAttributes) {
        final RedirectView redirectView = new RedirectView("/student/addStudent", true);
        
        entityManager.persist(student);
        
        redirectAttributes.addFlashAttribute("savedStudent", student);
        redirectAttributes.addFlashAttribute("addStudentSuccess", true);
        return redirectView;
    }
    
    /////////////////////////////////////////////////////////////////////////////////////////////////////////
    ////////////////////////////////////////// END ADD STUDENT //////////////////////////////////////////////
    /////////////////////////////////////////////////////////////////////////////////////////////////////////
    
    
    
    /////////////////////////////////////////////////////////////////////////////////////////////////////////
    ////////////////////////////////////////// REGISTER A USER //////////////////////////////////////////////
    /////////////////////////////////////////////////////////////////////////////////////////////////////////
    
    //Render the form for the user
    @GetMapping("/register")
    public String registerNewUserView(Model model) {
    	model.addAttribute("newUser", new NewUser());
        return "register-new-user";
    }
    
    //called when you post from a tag
    @Transactional
    @PostMapping("/register")
    public RedirectView registerNewUser(@ModelAttribute("user") NewUser newUser, RedirectAttributes redirectAttributes) {
    	final RedirectView redirectView = new RedirectView("/student/register", true);
    	
    	entityManager.persist(newUser);
    	
    	redirectAttributes.addFlashAttribute("savedNewUser", newUser);
    	redirectAttributes.addFlashAttribute("registerNewUserSuccess", true);
    	return redirectView;
    }
    
    /////////////////////////////////////////////////////////////////////////////////////////////////////////
    //////////////////////////////////////// END REGISTER A USER ////////////////////////////////////////////
    /////////////////////////////////////////////////////////////////////////////////////////////////////////
    
    
    
    /////////////////////////////////////////////////////////////////////////////////////////////////////////
    /////////////////////////////////////////////// LOGIN ///////////////////////////////////////////////////
    /////////////////////////////////////////////////////////////////////////////////////////////////////////
    
    //Render the form for the user
    @GetMapping("/login")
    public String loginUserView(Model model) {
    	model.addAttribute("newUser", new NewUser());
        return "login-new-user";
    }
    
    //called when you post from a tag
    @Transactional
    @PostMapping("/login")
    public RedirectView loginUser(@ModelAttribute("user") NewUser newUser, RedirectAttributes redirectAttributes) {
    	final RedirectView redirectView = new RedirectView("/student/viewStudents", true);
    	
    	entityManager.persist(newUser);
    	
    	redirectAttributes.addFlashAttribute("savedNewUser", newUser);
    	redirectAttributes.addFlashAttribute("registerNewUserSuccess", true);
    	return redirectView;
    }
    
    /////////////////////////////////////////////////////////////////////////////////////////////////////////
    ///////////////////////////////////////////// END LOGIN /////////////////////////////////////////////////
    /////////////////////////////////////////////////////////////////////////////////////////////////////////
    
    
    
    /////////////////////////////////////////////////////////////////////////////////////////////////////////
    /////////////////////////////////////////// VIEW STUDENTS ///////////////////////////////////////////////
    /////////////////////////////////////////////////////////////////////////////////////////////////////////
    @GetMapping("/viewStudents")
    public String viewStudents(Model model) {
       Query ReadAll = entityManager.createQuery("select s from Student s");
       List<Student> resultListAll = ReadAll.getResultList();
       resultListAll.forEach(System.out::println);
       model.addAttribute("students", resultListAll);
       return"view-students";
    }
    
    /////////////////////////////////////////////////////////////////////////////////////////////////////////
    ///////////////////////////////////////// END VIEW STUDENTS /////////////////////////////////////////////
    /////////////////////////////////////////////////////////////////////////////////////////////////////////
	
    
    /////////////////////////////////////////////////////////////////////////////////////////////////////////
    ////////////////////////////////////////// UPDATE STUDENTS //////////////////////////////////////////////
    /////////////////////////////////////////////////////////////////////////////////////////////////////////
	@GetMapping("/updateStudent/{id}/{name}")
	@Transactional
	@ResponseBody
	public void updateStudent(@PathVariable int id, @PathVariable String name) {
      Query update = entityManager.createQuery("update from Student s set name =?1 where s.id=?0");
      update.setParameter(0, id);
      update.setParameter(1, name);
      update.executeUpdate();
	}
	
    /////////////////////////////////////////////////////////////////////////////////////////////////////////
    //////////////////////////////////////// END UPDATE STUDENTS ////////////////////////////////////////////
    /////////////////////////////////////////////////////////////////////////////////////////////////////////
	
	
    /////////////////////////////////////////////////////////////////////////////////////////////////////////
    ////////////////////////////////////////// DELETE STUDENTS //////////////////////////////////////////////
    /////////////////////////////////////////////////////////////////////////////////////////////////////////
	@GetMapping("/deleteStudent/{id}")
	@Transactional
	@ResponseBody
	public void deleteStudent(@PathVariable int id) {
		Query delete = entityManager.createQuery("delete from Student s where s.id=?0");
		delete.setParameter(0, id);
		delete.executeUpdate();
	}
	
    /////////////////////////////////////////////////////////////////////////////////////////////////////////
    //////////////////////////////////////// END DELETE STUDENTS ////////////////////////////////////////////
    /////////////////////////////////////////////////////////////////////////////////////////////////////////
}